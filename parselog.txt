    lex.py: 924:lex: tokens   = ('NOTE', 'INSN', 'JUMPINSN', 'CALLINSN', 'CALL', 'SYMBOLREF', 'NIL', 'PARALLEL', 'CLOBBER', 'SET', 'USE', 'IFTHENELSE', 'CONSTINT', 'BARRIER', 'MEM', 'REG', 'PC', 'LABELREF', 'CODELABEL', 'IFLAG', 'VFLAG', 'FFLAG', 'CFLAG', 'UFLAG', 'SITYPE', 'SFTYPE', 'DITYPE', 'QITYPE', 'TITYPE', 'CCZTYPE', 'CCGCTYPE', 'CCGOCTYPE', 'CCTYPE', 'PLUS', 'MINUS', 'MULT', 'DIV', 'UDIV', 'MOD', 'UMOD', 'ASHIFTRT', 'LSHIFTRT', 'ASHIFT', 'LSHIFT', 'SUBREG', 'EXPRLIST', 'SIEXTEND', 'FLEXTEND', 'ZEEXTEND', 'COMPARE', 'NEG', 'LTU', 'GTU', 'LT', 'GT', 'LEU', 'GEU', 'LE', 'GE', 'EQ', 'NE', 'PUNCTUATION', 'DECIMAL', 'HEXADECIMAL', 'INTEGER', 'IDENTIFIER', 'STRING', 'BEGIG1', 'ENDIG1', 'BEGIG2', 'ENDIG2', 'BEGIG3', 'ENDIG3', 'COMM', 'SKIP', 'FUNC', 'ENDPARA', 'RARROW', 'NEWLINE')
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive', 'IG1': 'exclusive', 'IG2': 'exclusive', 'IG3': 'exclusive', 'EXPECT': 'exclusive', 'CATCH': 'exclusive', 'COMMENT': 'exclusive'}
    lex.py: 953:lex: Adding rule t_PUNCTUATION -> '([!:,.()*-])' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_STRING -> '(\"[^"\n]*\")' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_DECIMAL -> '([0-9]+)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_HEXADECIMAL -> '(0[xX][0-9a-fA-F]+)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_COMM -> ';;' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_BEGIG1 -> '\[' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_BEGIG2 -> '{' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_BEGIG3 -> '<' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ignore_IDENTIFIER -> '([a-zA-Z][a-zA-Z0-9_]*)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IFTHENELSE -> 'if\_then\_else' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FLEXTEND -> 'float_extend:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SIEXTEND -> 'sign_extend:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ZEEXTEND -> 'zero_extend:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SYMBOLREF -> 'symbol\_ref' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PARALLEL -> 'parallel \[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CODELABEL -> 'code\_label' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_JUMPINSN -> 'jump\_insn' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CALLINSN -> 'call\_insn' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CONSTINT -> 'const\_int' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LABELREF -> 'label\_ref' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EXPRLIST -> 'expr_list:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASHIFTRT -> 'ashiftrt:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LSHIFTRT -> 'lshiftrt:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMPARE -> 'compare:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CLOBBER -> 'clobber' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_BARRIER -> 'barrier' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASHIFT -> 'ashift:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LSHIFT -> 'lshift:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SUBREG -> 'subreg:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> 'minus:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CCGOCTYPE -> 'CCGOC' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> 'plus:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MULT -> 'mult:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_UDIV -> 'udiv:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_UMOD -> 'umod:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOTE -> 'note' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_INSN -> 'insn' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CALL -> 'call' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CCGCTYPE -> 'CCGC' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIV -> 'div:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MOD -> 'mod:' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NIL -> 'nil' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SET -> 'set' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_USE -> 'use' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MEM -> 'mem' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_REG -> 'reg' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CCZTYPE -> 'CCZ' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NEG -> 'neg' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LTU -> 'ltu' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GTU -> 'gtu' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LEU -> 'leu' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GEU -> 'geu' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PC -> 'pc' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IFLAG -> '/i' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_VFLAG -> '/v' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FFLAG -> '/f' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CFLAG -> '/c' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_UFLAG -> '/u' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SITYPE -> 'SI' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SFTYPE -> 'SF' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DITYPE -> 'DI' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_QITYPE -> 'QI' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TITYPE -> 'TI' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LT -> 'lt' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GT -> 'gt' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LE -> 'le' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GE -> 'ge' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQ -> 'eq' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NE -> 'ne' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ENDPARA -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RARROW -> '->' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CCTYPE -> 'C' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_IG1_ENDIG1 -> '\]' (state 'IG1')
    lex.py: 953:lex: Adding rule t_IG1_ENDIG2 -> '}' (state 'IG1')
    lex.py: 953:lex: Adding rule t_IG1_ENDIG3 -> '>' (state 'IG1')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'IG1')
    lex.py: 959:lex: Adding rule t_IG1_ignore_SKIP -> '.' (state 'IG1')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'IG2')
    lex.py: 959:lex: Adding rule t_IG2_ignore_SKIP -> '.' (state 'IG2')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'IG3')
    lex.py: 959:lex: Adding rule t_IG3_ignore_SKIP -> '.' (state 'IG3')
    lex.py: 953:lex: Adding rule t_EXPECT_FUNC -> 'Function' (state 'EXPECT')
    lex.py: 953:lex: Adding rule t_EXPECT_NEWLINE -> '\n+' (state 'EXPECT')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'EXPECT')
    lex.py: 959:lex: Adding rule t_EXPECT_ignore_SKIP -> '.' (state 'EXPECT')
    lex.py: 953:lex: Adding rule t_CATCH_IDENTIFIER -> '([a-zA-Z][a-zA-Z0-9_]*)' (state 'CATCH')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'CATCH')
    lex.py: 953:lex: Adding rule t_COMMENT_NEWLINE -> '\n+' (state 'COMMENT')
    lex.py: 953:lex: Adding rule t_ANY_NEWLINE -> '\n+' (state 'COMMENT')
    lex.py: 959:lex: Adding rule t_COMMENT_ignore_SKIP -> '.' (state 'COMMENT')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_PUNCTUATION>([!:,.()*-]))|(?P<t_STRING>(\"[^"\n]*\"))|(?P<t_DECIMAL>([0-9]+))|(?P<t_HEXADECIMAL>(0[xX][0-9a-fA-F]+))|(?P<t_COMM>;;)|(?P<t_BEGIG1>\[)|(?P<t_BEGIG2>{)|(?P<t_BEGIG3><)|(?P<t_ANY_NEWLINE>\n+)|(?P<t_ignore_IDENTIFIER>([a-zA-Z][a-zA-Z0-9_]*))|(?P<t_IFTHENELSE>if\_then\_else)|(?P<t_FLEXTEND>float_extend:)|(?P<t_SIEXTEND>sign_extend:)|(?P<t_ZEEXTEND>zero_extend:)|(?P<t_SYMBOLREF>symbol\_ref)|(?P<t_PARALLEL>parallel \[)|(?P<t_CODELABEL>code\_label)|(?P<t_JUMPINSN>jump\_insn)|(?P<t_CALLINSN>call\_insn)|(?P<t_CONSTINT>const\_int)|(?P<t_LABELREF>label\_ref)|(?P<t_EXPRLIST>expr_list:)|(?P<t_ASHIFTRT>ashiftrt:)|(?P<t_LSHIFTRT>lshiftrt:)|(?P<t_COMPARE>compare:)|(?P<t_CLOBBER>clobber)|(?P<t_BARRIER>barrier)|(?P<t_ASHIFT>ashift:)|(?P<t_LSHIFT>lshift:)|(?P<t_SUBREG>subreg:)|(?P<t_MINUS>minus:)|(?P<t_CCGOCTYPE>CCGOC)|(?P<t_PLUS>plus:)|(?P<t_MULT>mult:)|(?P<t_UDIV>udiv:)|(?P<t_UMOD>umod:)|(?P<t_NOTE>note)|(?P<t_INSN>insn)|(?P<t_CALL>call)|(?P<t_CCGCTYPE>CCGC)|(?P<t_DIV>div:)|(?P<t_MOD>mod:)|(?P<t_NIL>nil)|(?P<t_SET>set)|(?P<t_USE>use)|(?P<t_MEM>mem)|(?P<t_REG>reg)|(?P<t_CCZTYPE>CCZ)|(?P<t_NEG>neg)|(?P<t_LTU>ltu)|(?P<t_GTU>gtu)|(?P<t_LEU>leu)|(?P<t_GEU>geu)|(?P<t_PC>pc)|(?P<t_IFLAG>/i)|(?P<t_VFLAG>/v)|(?P<t_FFLAG>/f)|(?P<t_CFLAG>/c)|(?P<t_UFLAG>/u)|(?P<t_SITYPE>SI)|(?P<t_SFTYPE>SF)|(?P<t_DITYPE>DI)|(?P<t_QITYPE>QI)|(?P<t_TITYPE>TI)|(?P<t_LT>lt)|(?P<t_GT>gt)|(?P<t_LE>le)|(?P<t_GE>ge)|(?P<t_EQ>eq)|(?P<t_NE>ne)|(?P<t_ENDPARA>\])|(?P<t_RARROW>->)|(?P<t_CCTYPE>C)'
    lex.py: 975:lex: state 'IG1' : regex[0] = '(?P<t_IG1_ENDIG1>\])|(?P<t_IG1_ENDIG2>})|(?P<t_IG1_ENDIG3>>)|(?P<t_ANY_NEWLINE>\n+)|(?P<t_IG1_ignore_SKIP>.)'
    lex.py: 975:lex: state 'IG2' : regex[0] = '(?P<t_ANY_NEWLINE>\n+)|(?P<t_IG2_ignore_SKIP>.)'
    lex.py: 975:lex: state 'IG3' : regex[0] = '(?P<t_ANY_NEWLINE>\n+)|(?P<t_IG3_ignore_SKIP>.)'
    lex.py: 975:lex: state 'EXPECT' : regex[0] = '(?P<t_EXPECT_FUNC>Function)|(?P<t_EXPECT_NEWLINE>\n+)|(?P<t_ANY_NEWLINE>\n+)|(?P<t_EXPECT_ignore_SKIP>.)'
    lex.py: 975:lex: state 'CATCH' : regex[0] = '(?P<t_CATCH_IDENTIFIER>([a-zA-Z][a-zA-Z0-9_]*))|(?P<t_ANY_NEWLINE>\n+)'
    lex.py: 975:lex: state 'COMMENT' : regex[0] = '(?P<t_COMMENT_NEWLINE>\n+)|(?P<t_ANY_NEWLINE>\n+)|(?P<t_COMMENT_ignore_SKIP>.)'
